// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VideoEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VideoEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VideoEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VideoEvent", id.toString(), this);
    }
  }

  static load(id: string): VideoEvent | null {
    return changetype<VideoEvent | null>(store.get("VideoEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get videocontentId(): Bytes {
    let value = this.get("videocontentId");
    return value!.toBytes();
  }

  set videocontentId(value: Bytes) {
    this.set("videocontentId", Value.fromBytes(value));
  }

  get ipfsURI(): string {
    let value = this.get("ipfsURI");
    return value!.toString();
  }

  set ipfsURI(value: string) {
    this.set("ipfsURI", Value.fromString(value));
  }

  get videoeventOwner(): Bytes {
    let value = this.get("videoeventOwner");
    return value!.toBytes();
  }

  set videoeventOwner(value: Bytes) {
    this.set("videoeventOwner", Value.fromBytes(value));
  }

  get maxWatchCapacity(): BigInt {
    let value = this.get("maxWatchCapacity");
    return value!.toBigInt();
  }

  set maxWatchCapacity(value: BigInt) {
    this.set("maxWatchCapacity", Value.fromBigInt(value));
  }

  get totalJoinedWatchParties(): BigInt {
    let value = this.get("totalJoinedWatchParties");
    return value!.toBigInt();
  }

  set totalJoinedWatchParties(value: BigInt) {
    this.set("totalJoinedWatchParties", Value.fromBigInt(value));
  }

  get joinedWatchParties(): Array<string> | null {
    let value = this.get("joinedWatchParties");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set joinedWatchParties(value: Array<string> | null) {
    if (!value) {
      this.unset("joinedWatchParties");
    } else {
      this.set(
        "joinedWatchParties",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class VideoEventMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VideoEventMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VideoEventMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VideoEventMetadata", id.toString(), this);
    }
  }

  static load(id: string): VideoEventMetadata | null {
    return changetype<VideoEventMetadata | null>(
      store.get("VideoEventMetadata", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get arweavelink(): string {
    let value = this.get("arweavelink");
    return value!.toString();
  }

  set arweavelink(value: string) {
    this.set("arweavelink", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalJoinedWatchParties(): BigInt {
    let value = this.get("totalJoinedWatchParties");
    return value!.toBigInt();
  }

  set totalJoinedWatchParties(value: BigInt) {
    this.set("totalJoinedWatchParties", Value.fromBigInt(value));
  }

  get joinedWatchParties(): Array<string> | null {
    let value = this.get("joinedWatchParties");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set joinedWatchParties(value: Array<string> | null) {
    if (!value) {
      this.unset("joinedWatchParties");
    } else {
      this.set(
        "joinedWatchParties",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class JoinWatchParty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JoinWatchParty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JoinWatchParty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("JoinWatchParty", id.toString(), this);
    }
  }

  static load(id: string): JoinWatchParty | null {
    return changetype<JoinWatchParty | null>(store.get("JoinWatchParty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get attendee(): string {
    let value = this.get("attendee");
    return value!.toString();
  }

  set attendee(value: string) {
    this.set("attendee", Value.fromString(value));
  }

  get videoevent(): string {
    let value = this.get("videoevent");
    return value!.toString();
  }

  set videoevent(value: string) {
    this.set("videoevent", Value.fromString(value));
  }
}
